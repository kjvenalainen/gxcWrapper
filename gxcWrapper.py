#!/usr/bin/env python3

import os
import sys
import json
import argparse
import typing


def main(fragment_dir: str, output_file: str) -> None:
    # Normalize and expand all paths.
    fragment_dir = os.path.abspath(os.path.expanduser(fragment_dir))
    output_file = os.path.abspath(os.path.expanduser(output_file))

    if not os.path.exists(fragment_dir):
        print(f"Error: {fragment_dir} does not exist")
        sys.exit(1)

    if not os.path.isdir(fragment_dir):
        print(f"Error: {fragment_dir} is not a directory")
        sys.exit(1)

    compile_commands: dict[str, typing.Any] = {}
    if os.path.exists(output_file):
        with open(output_file, "r") as f:
            # Convert this list to a dict indxed by 'file' for easier lookup.
            existing_compile_commands: list[dict[str, typing.Any]] = json.load(f)

        for entry in existing_compile_commands:
            compile_commands[entry["file"]] = entry

        print(f"Found {len(compile_commands)} entries in {output_file}")
    else:
        print(f"Creating {output_file}")

    files_updated = 0
    for filename in os.listdir(fragment_dir):
        if not filename.endswith(".json"):
            continue

        input_file = os.path.join(fragment_dir, filename)
        with open(input_file, "r") as input_file:
            contents = input_file.read()

            # Contents may end with ",\n" or "," so remove these if present.
            if contents.endswith(",\n"):
                contents = contents[:-2]
            elif contents.endswith(","):
                contents = contents[:-1]

            data = json.loads(contents)

            if not data["file"] in compile_commands:
                files_updated += 1

            # Overwrite or insert the entry for this file.
            compile_commands[data["file"]] = data

    print(f"Updated {files_updated} entries")

    with open(output_file, "w") as f:
        json.dump(list(compile_commands.values()), f, indent=2)

        print(f"Wrote {len(compile_commands)} entries")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Helper script to generate a compile_commands.json file for a project"
    )
    parser.add_argument(
        "fragment_dir",
        help="Directory containing the fragment files generated by xcodebuild",
    )
    parser.add_argument(
        "output_file",
        help="Path to compile_commands.json; will be modified, or created if it does not exist",
    )
    args = parser.parse_args()

    main(args.fragment_dir, args.output_file)
